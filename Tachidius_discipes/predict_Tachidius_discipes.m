function [prdData, info] = predict_Tachidius_discipes(par, data, auxData)
% file generated by prt_predict

% unpack par, data, auxData
cPar = parscomp_st(par); vars_pull(par);
v2struct(par); v2struct(cPar); v2struct(data); v2struct(auxData);

filterChecks= E_Hh>= E_Hb;
if filterChecks
    info=0;
    prdData={};
    return;
end

% compute temperature correction factors
pars_T = [T_A T_L T_AL];
TC_ah = tempcorr(temp.ah, T_ref, pars_T);
TC_Tap = tempcorr(C2K(Tap(:,1)), T_ref, pars_T);
TC_Tab = tempcorr(C2K(Tah(:,1)), T_ref, T_A);
TC12 = tempcorr(temp.tL12, T_ref, pars_T);
TC15 = tempcorr(temp.tL15, T_ref, pars_T);
TC18 = tempcorr(temp.tL18, T_ref, pars_T);
TC21 = tempcorr(temp.tL21, T_ref, pars_T);
TC24 = tempcorr(temp.tL24, T_ref, pars_T);
%reproduction ct
 TC_TR = tempcorr(C2K(TR(:,1)), T_ref, T_A);
% life cycle
pars_tp = [g, k, l_T, v_Hb, v_Hp];
[tau_p, tau_b, l_p, l_b, info] = get_tp (pars_tp, f);
if info == 0;  prdData = []; return; end
pars_UE0 = [V_Hb; g; k_J; k_M; v]; % compose parameter vector
[U_E0, ~, info] = initial_scaled_reserve(f, pars_UE0); % d.cm^2, initial scaled reserve
if info == 0;  prdData = []; return; end
E_0 = U_E0 * p_Am; % J, initial energy in egg
% hatch
[~, aUL] = ode45(@dget_aul, [0; U_Hh], [0 U_E0 1e-10], [], kap, v, k_J, g, L_m);
a_h = aUL(end,1)/ TC_ah; % d, age at hatch
Lw_h = aUL(end,3)/ del_M; % cm, physical length at hatch

% birth
L_b = L_m * l_b;                  % cm, structural length at birth
Lw_b = L_b/ del_M;                % cm, physical length at birth

% get scaled time and length at birth at f = 1 (parents fed ad libitum)
% puberty/ ultimate
L_p = L_m * l_p; % cm, structural length at puberty
Lw_p = L_p/ del_M; % cm, physical length at puberty
Wd_p = L_p^3 * (1 + f * ome) * d_V; % g, ultimate dry weight

% pack to output
prdData.ah = a_h;
prdData.Lh = Lw_h;
prdData.Lb = Lw_b;
prdData.Lp = Lw_p;
prdData.Wdp = Wd_p;

% uni-variate data
p = [p_Am; v; p_M; k_J; kap; kap_G; E_G; E_Hb; E_Hp];
E_b = f * E_m * L_b^3; % J, energy in reserve at birth
ELHR0 = [E_b; L_b; E_Hb; 0]; % state variables at birth

[tsort, ~, ci] = unique(tL12(:,1)); 
[~, ELHR] = ode45(@dget_ELHR_sbp, tsort-1, ELHR0,[], p, TC12, f);
EL12 = ELHR(ci,2)./ del_M; 

[tsort, ~, ci] = unique(tL15(:,1)); 
[~, ELHR] = ode45(@dget_ELHR_sbp, tsort, ELHR0,[], p, TC15, f);
EL15 = ELHR(ci,2)/ del_M; 

[tsort, ~, ci] = unique(tL18(:,1)); 
[~, ELHR] = ode45(@dget_ELHR_sbp, tsort, ELHR0,[], p, TC18, f);
EL18 = ELHR(ci,2)/ del_M; 

[tsort, ~, ci] = unique(tL21(:,1)); 
[~, ELHR] = ode45(@dget_ELHR_sbp, tsort, ELHR0,[], p, TC21, f);
EL21 = ELHR(ci,2)/ del_M; 

[tsort, ~, ci] = unique(tL24(:,1)); 
[~, ELHR] = ode45(@dget_ELHR_sbp, tsort, ELHR0,[], p, TC24, f);
EL24 = ELHR(ci,2)/ del_M; 

% reproduction
EN12 = zeros(size(tN12,1),1);
for i = 1:length(tN12)
[~, ELHR] = ode45(@dget_ELHR_sbp, [0 tN12(i,1)], ELHR0,[], p, TC12, f);
EN12(i) = kap_R * ELHR(end,4)/E_0; 
end

EN15 = zeros(size(tN15,1),1);
for i = 1:length(tN15)
[~, ELHR] = ode45(@dget_ELHR_sbp, [0 tN15(i,1)], ELHR0,[], p, TC15, f);
EN15(i) = kap_R * ELHR(end,4)/E_0; 
end

EN18 = zeros(size(tN18,1),1);
for i = 1:length(tN18)
[~, ELHR] = ode45(@dget_ELHR_sbp, [0 tN18(i,1)], ELHR0,[], p, TC18, f);
EN18(i) = kap_R * ELHR(end,4)/E_0; 
end

EN21 = zeros(size(tN21,1),1);
for i = 1:length(tN21)
[~, ELHR] = ode45(@dget_ELHR_sbp, [0 tN21(i,1)], ELHR0,[], p, TC21, f);
EN21(i) = kap_R * ELHR(end,4)/E_0; 
end

EN24 = zeros(size(tN24,1),1);
for i = 1:length(tN24)
[~, ELHR] = ode45(@dget_ELHR_sbp, [0 tN24(i,1)], ELHR0,[], p, TC24, f);
EN24(i) = kap_R * ELHR(end,4)/E_0; 
end
% s_M= L_p/L_b;
s_M = 1;
% T-R data
 R_i = kap_R * (f * p_Am *s_M * L_p^2 - p_M * L_p^3 - k_J * E_Hp)/ E_0; % #/d, ultimate reproduction rate at T_ref
 ER_i = R_i * TC_TR; % #/d, ultimate reproduction rate

%age at birth
 Ea_b = (tau_b/ k_M) ./ TC_Tab;
 
%age at birth
 Ea_p = (tau_p/ k_M) ./ TC_Tap;

 % %weight of carbon and nitrogen
  EWC = (LWCN(:,1) * del_M).^3 * (1 + f * w) * d_V * 12/ w_V*1e6;  % mug, carbon weight
  EWN = (LWCN(:,1) * del_M).^3 * (1 + f * w) * d_V * n_NV * 14/ w_V*1e6;  % mug, nitrogen weightf
 
 
% pack to output
prdData.tL12 = EL12;
prdData.tL15 = EL15;
prdData.tL18 = EL18;
prdData.tL21 = EL21;
prdData.tL24 = EL24;
% repro
prdData.tN12= EN12;
prdData.tN15 = EN15;
prdData.tN18 = EN18;
prdData.tN21 = EN21;
prdData.tN24 = EN24;
prdData.Tah = Ea_b; %age at birth
prdData.Tap = Ea_p;
prdData.LWCN = [EWC EWN]; %carbon and nitrogen mass
prdData.TR= ER_i;
end

function dELHR = dget_ELHR_sbp(t, ELHR, p, TC, f)
  % Define changes in the state variables for abj model
  % t: time
  % ELHR: 4-vector with state variables
  %         E , J, reserve energy
  %         L , cm, structural length
  %         E_H , J , cumulated energy inversted into maturity (E_H in Kooijman 2010)
  %         E_R , J, reproduction buffer (E_R in Kooijman 2010)
  %         
  % dELHR: 4-vector with change in E, L, H, R

  % unpack state variables

  E = ELHR(1); L = ELHR(2); E_H = ELHR(3);

  % unpack par
  p_Am = p(1); v = p(2); p_M = p(3); k_J = p(4); 
  kap = p(5); kap_G = p(6); 
  E_G = p(7); E_Hb = p(8); E_Hp = p(9);

  % temp correction
  pT_Am = TC * p_Am ;
  vT = TC * v;  
  pT_M = TC * p_M;
  kT_J = TC * k_J; 

  pA = (pT_Am * f * L^2) * (E_H >= E_Hb);
  if E_H < E_Hp
    if  kap * E * vT >= pT_M * L^4 % section 4.1.5 comments to Kooy2010 (if the energy is higher than mantainance costs)
        r = (E * vT/ L - pT_M * L^3/ kap)/ (E + E_G * L^3/ kap); % d^-1, specific growth rate  
    else 
        r = (E * vT/ L - pT_M * L^3/ kap)/ (E + kap_G * E_G * L^3/ kap); % d^-1, specific growth rate                                      
    end
    pC  = E * (vT/ L - r); % J/d, mobilized energy flux
    % generate derivatives
    dE_H  = ((1 - kap) * pC - kT_J * E_H);     % J/d, change in cumulated energy invested in maturation
    dE_R  = 0; % J/d, change in reproduction buffer
  else
    % adults do not grow, and do not shrink
    r = 0; % d^-1, specific growth rate                                      
    pC  = E * vT/ L; % J/d, mobilized energy flux
    dE_H  = 0;     % J/d, change in cumulated energy invested in maturation
    dE_R  = pC - pT_M * L^3 - kT_J * E_Hp; % J/d, change in reproduction buffer
  end
  % generate derivatives
  dE    = pA - pC;  % J/d, change in energy in reserve
  dL    = r * L / 3;    % cm^3/d, change in structural volume

  % pack derivatives
  dELHR = [dE; dL; dE_H; dE_R]; 
end
